<?php
// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

require_once 'Ice/SliceChecksumDict.php';

if(!isset($Murmur__t_NetAddress))
{
    $Murmur__t_NetAddress = IcePHP_defineSequence('::Murmur::NetAddress', $IcePHP__t_byte);
}

if(!class_exists('Murmur_User'))
{
    class Murmur_User
    {
        public function __construct($session=0, $userid=0, $mute=false, $deaf=false, $suppress=false, $prioritySpeaker=false, $selfMute=false, $selfDeaf=false, $recording=false, $channel=0, $name='', $onlinesecs=0, $bytespersec=0, $version=0, $release='', $os='', $osversion='', $identity='', $context='', $comment='', $address=null, $tcponly=false, $idlesecs=0)
        {
            $this->session = $session;
            $this->userid = $userid;
            $this->mute = $mute;
            $this->deaf = $deaf;
            $this->suppress = $suppress;
            $this->prioritySpeaker = $prioritySpeaker;
            $this->selfMute = $selfMute;
            $this->selfDeaf = $selfDeaf;
            $this->recording = $recording;
            $this->channel = $channel;
            $this->name = $name;
            $this->onlinesecs = $onlinesecs;
            $this->bytespersec = $bytespersec;
            $this->version = $version;
            $this->release = $release;
            $this->os = $os;
            $this->osversion = $osversion;
            $this->identity = $identity;
            $this->context = $context;
            $this->comment = $comment;
            $this->address = $address;
            $this->tcponly = $tcponly;
            $this->idlesecs = $idlesecs;
        }

        public function __toString()
        {
            global $Murmur__t_User;
            return IcePHP_stringify($this, $Murmur__t_User);
        }

        public $session;
        public $userid;
        public $mute;
        public $deaf;
        public $suppress;
        public $prioritySpeaker;
        public $selfMute;
        public $selfDeaf;
        public $recording;
        public $channel;
        public $name;
        public $onlinesecs;
        public $bytespersec;
        public $version;
        public $release;
        public $os;
        public $osversion;
        public $identity;
        public $context;
        public $comment;
        public $address;
        public $tcponly;
        public $idlesecs;
    }

    $Murmur__t_User = IcePHP_defineStruct('::Murmur::User', 'Murmur_User', array(
        array('session', $IcePHP__t_int), 
        array('userid', $IcePHP__t_int), 
        array('mute', $IcePHP__t_bool), 
        array('deaf', $IcePHP__t_bool), 
        array('suppress', $IcePHP__t_bool), 
        array('prioritySpeaker', $IcePHP__t_bool), 
        array('selfMute', $IcePHP__t_bool), 
        array('selfDeaf', $IcePHP__t_bool), 
        array('recording', $IcePHP__t_bool), 
        array('channel', $IcePHP__t_int), 
        array('name', $IcePHP__t_string), 
        array('onlinesecs', $IcePHP__t_int), 
        array('bytespersec', $IcePHP__t_int), 
        array('version', $IcePHP__t_int), 
        array('release', $IcePHP__t_string), 
        array('os', $IcePHP__t_string), 
        array('osversion', $IcePHP__t_string), 
        array('identity', $IcePHP__t_string), 
        array('context', $IcePHP__t_string), 
        array('comment', $IcePHP__t_string), 
        array('address', $Murmur__t_NetAddress), 
        array('tcponly', $IcePHP__t_bool), 
        array('idlesecs', $IcePHP__t_int)));
}

if(!isset($Murmur__t_IntList))
{
    $Murmur__t_IntList = IcePHP_defineSequence('::Murmur::IntList', $IcePHP__t_int);
}

if(!class_exists('Murmur_Channel'))
{
    class Murmur_Channel
    {
        public function __construct($id=0, $name='', $parent=0, $links=null, $description='', $temporary=false, $position=0)
        {
            $this->id = $id;
            $this->name = $name;
            $this->parent = $parent;
            $this->links = $links;
            $this->description = $description;
            $this->temporary = $temporary;
            $this->position = $position;
        }

        public function __toString()
        {
            global $Murmur__t_Channel;
            return IcePHP_stringify($this, $Murmur__t_Channel);
        }

        public $id;
        public $name;
        public $parent;
        public $links;
        public $description;
        public $temporary;
        public $position;
    }

    $Murmur__t_Channel = IcePHP_defineStruct('::Murmur::Channel', 'Murmur_Channel', array(
        array('id', $IcePHP__t_int), 
        array('name', $IcePHP__t_string), 
        array('parent', $IcePHP__t_int), 
        array('links', $Murmur__t_IntList), 
        array('description', $IcePHP__t_string), 
        array('temporary', $IcePHP__t_bool), 
        array('position', $IcePHP__t_int)));
}

if(!class_exists('Murmur_Group'))
{
    class Murmur_Group
    {
        public function __construct($name='', $inherited=false, $inherit=false, $inheritable=false, $add=null, $remove=null, $members=null)
        {
            $this->name = $name;
            $this->inherited = $inherited;
            $this->inherit = $inherit;
            $this->inheritable = $inheritable;
            $this->add = $add;
            $this->remove = $remove;
            $this->members = $members;
        }

        public function __toString()
        {
            global $Murmur__t_Group;
            return IcePHP_stringify($this, $Murmur__t_Group);
        }

        public $name;
        public $inherited;
        public $inherit;
        public $inheritable;
        public $add;
        public $remove;
        public $members;
    }

    $Murmur__t_Group = IcePHP_defineStruct('::Murmur::Group', 'Murmur_Group', array(
        array('name', $IcePHP__t_string), 
        array('inherited', $IcePHP__t_bool), 
        array('inherit', $IcePHP__t_bool), 
        array('inheritable', $IcePHP__t_bool), 
        array('add', $Murmur__t_IntList), 
        array('remove', $Murmur__t_IntList), 
        array('members', $Murmur__t_IntList)));
}

if(!defined('Murmur_PermissionWrite'))
{
    define('Murmur_PermissionWrite', 1);
}

if(!defined('Murmur_PermissionTraverse'))
{
    define('Murmur_PermissionTraverse', 2);
}

if(!defined('Murmur_PermissionEnter'))
{
    define('Murmur_PermissionEnter', 4);
}

if(!defined('Murmur_PermissionSpeak'))
{
    define('Murmur_PermissionSpeak', 8);
}

if(!defined('Murmur_PermissionWhisper'))
{
    define('Murmur_PermissionWhisper', 256);
}

if(!defined('Murmur_PermissionMuteDeafen'))
{
    define('Murmur_PermissionMuteDeafen', 16);
}

if(!defined('Murmur_PermissionMove'))
{
    define('Murmur_PermissionMove', 32);
}

if(!defined('Murmur_PermissionMakeChannel'))
{
    define('Murmur_PermissionMakeChannel', 64);
}

if(!defined('Murmur_PermissionMakeTempChannel'))
{
    define('Murmur_PermissionMakeTempChannel', 1024);
}

if(!defined('Murmur_PermissionLinkChannel'))
{
    define('Murmur_PermissionLinkChannel', 128);
}

if(!defined('Murmur_PermissionTextMessage'))
{
    define('Murmur_PermissionTextMessage', 512);
}

if(!defined('Murmur_PermissionKick'))
{
    define('Murmur_PermissionKick', 65536);
}

if(!defined('Murmur_PermissionBan'))
{
    define('Murmur_PermissionBan', 131072);
}

if(!defined('Murmur_PermissionRegister'))
{
    define('Murmur_PermissionRegister', 262144);
}

if(!defined('Murmur_PermissionRegisterSelf'))
{
    define('Murmur_PermissionRegisterSelf', 524288);
}

if(!class_exists('Murmur_ACL'))
{
    class Murmur_ACL
    {
        public function __construct($applyHere=false, $applySubs=false, $inherited=false, $userid=0, $group='', $allow=0, $deny=0)
        {
            $this->applyHere = $applyHere;
            $this->applySubs = $applySubs;
            $this->inherited = $inherited;
            $this->userid = $userid;
            $this->group = $group;
            $this->allow = $allow;
            $this->deny = $deny;
        }

        public function __toString()
        {
            global $Murmur__t_ACL;
            return IcePHP_stringify($this, $Murmur__t_ACL);
        }

        public $applyHere;
        public $applySubs;
        public $inherited;
        public $userid;
        public $group;
        public $allow;
        public $deny;
    }

    $Murmur__t_ACL = IcePHP_defineStruct('::Murmur::ACL', 'Murmur_ACL', array(
        array('applyHere', $IcePHP__t_bool), 
        array('applySubs', $IcePHP__t_bool), 
        array('inherited', $IcePHP__t_bool), 
        array('userid', $IcePHP__t_int), 
        array('group', $IcePHP__t_string), 
        array('allow', $IcePHP__t_int), 
        array('deny', $IcePHP__t_int)));
}

if(!class_exists('Murmur_Ban'))
{
    class Murmur_Ban
    {
        public function __construct($address=null, $bits=0, $name='', $hash='', $reason='', $start=0, $duration=0)
        {
            $this->address = $address;
            $this->bits = $bits;
            $this->name = $name;
            $this->hash = $hash;
            $this->reason = $reason;
            $this->start = $start;
            $this->duration = $duration;
        }

        public function __toString()
        {
            global $Murmur__t_Ban;
            return IcePHP_stringify($this, $Murmur__t_Ban);
        }

        public $address;
        public $bits;
        public $name;
        public $hash;
        public $reason;
        public $start;
        public $duration;
    }

    $Murmur__t_Ban = IcePHP_defineStruct('::Murmur::Ban', 'Murmur_Ban', array(
        array('address', $Murmur__t_NetAddress), 
        array('bits', $IcePHP__t_int), 
        array('name', $IcePHP__t_string), 
        array('hash', $IcePHP__t_string), 
        array('reason', $IcePHP__t_string), 
        array('start', $IcePHP__t_int), 
        array('duration', $IcePHP__t_int)));
}

if(!class_exists('Murmur_LogEntry'))
{
    class Murmur_LogEntry
    {
        public function __construct($timestamp=0, $txt='')
        {
            $this->timestamp = $timestamp;
            $this->txt = $txt;
        }

        public function __toString()
        {
            global $Murmur__t_LogEntry;
            return IcePHP_stringify($this, $Murmur__t_LogEntry);
        }

        public $timestamp;
        public $txt;
    }

    $Murmur__t_LogEntry = IcePHP_defineStruct('::Murmur::LogEntry', 'Murmur_LogEntry', array(
        array('timestamp', $IcePHP__t_int), 
        array('txt', $IcePHP__t_string)));
}

if(!isset($Murmur__t_Tree))
{
    $Murmur__t_Tree = IcePHP_declareClass('::Murmur::Tree');
    $Murmur__t_TreePrx = IcePHP_defineProxy($Murmur__t_Tree);
}

if(!isset($Murmur__t_TreeList))
{
    $Murmur__t_TreeList = IcePHP_defineSequence('::Murmur::TreeList', $Murmur__t_Tree);
}

if(!class_exists('Murmur_ChannelInfo'))
{
    class Murmur_ChannelInfo
    {
        const ChannelDescription = 0;
        const ChannelPosition = 1;
    }

    $Murmur__t_ChannelInfo = IcePHP_defineEnum('::Murmur::ChannelInfo', array('ChannelDescription', 'ChannelPosition'));
}

if(!class_exists('Murmur_UserInfo'))
{
    class Murmur_UserInfo
    {
        const UserName = 0;
        const UserEmail = 1;
        const UserComment = 2;
        const UserHash = 3;
        const UserPassword = 4;
        const UserLastActive = 5;
    }

    $Murmur__t_UserInfo = IcePHP_defineEnum('::Murmur::UserInfo', array('UserName', 'UserEmail', 'UserComment', 'UserHash', 'UserPassword', 'UserLastActive'));
}

if(!isset($Murmur__t_UserMap))
{
    $Murmur__t_UserMap = IcePHP_defineDictionary('::Murmur::UserMap', $IcePHP__t_int, $Murmur__t_User);
}

if(!isset($Murmur__t_ChannelMap))
{
    $Murmur__t_ChannelMap = IcePHP_defineDictionary('::Murmur::ChannelMap', $IcePHP__t_int, $Murmur__t_Channel);
}

if(!isset($Murmur__t_ChannelList))
{
    $Murmur__t_ChannelList = IcePHP_defineSequence('::Murmur::ChannelList', $Murmur__t_Channel);
}

if(!isset($Murmur__t_UserList))
{
    $Murmur__t_UserList = IcePHP_defineSequence('::Murmur::UserList', $Murmur__t_User);
}

if(!isset($Murmur__t_GroupList))
{
    $Murmur__t_GroupList = IcePHP_defineSequence('::Murmur::GroupList', $Murmur__t_Group);
}

if(!isset($Murmur__t_ACLList))
{
    $Murmur__t_ACLList = IcePHP_defineSequence('::Murmur::ACLList', $Murmur__t_ACL);
}

if(!isset($Murmur__t_LogList))
{
    $Murmur__t_LogList = IcePHP_defineSequence('::Murmur::LogList', $Murmur__t_LogEntry);
}

if(!isset($Murmur__t_BanList))
{
    $Murmur__t_BanList = IcePHP_defineSequence('::Murmur::BanList', $Murmur__t_Ban);
}

if(!isset($Murmur__t_IdList))
{
    $Murmur__t_IdList = IcePHP_defineSequence('::Murmur::IdList', $IcePHP__t_int);
}

if(!isset($Murmur__t_NameList))
{
    $Murmur__t_NameList = IcePHP_defineSequence('::Murmur::NameList', $IcePHP__t_string);
}

if(!isset($Murmur__t_NameMap))
{
    $Murmur__t_NameMap = IcePHP_defineDictionary('::Murmur::NameMap', $IcePHP__t_int, $IcePHP__t_string);
}

if(!isset($Murmur__t_IdMap))
{
    $Murmur__t_IdMap = IcePHP_defineDictionary('::Murmur::IdMap', $IcePHP__t_string, $IcePHP__t_int);
}

if(!isset($Murmur__t_Texture))
{
    $Murmur__t_Texture = IcePHP_defineSequence('::Murmur::Texture', $IcePHP__t_byte);
}

if(!isset($Murmur__t_ConfigMap))
{
    $Murmur__t_ConfigMap = IcePHP_defineDictionary('::Murmur::ConfigMap', $IcePHP__t_string, $IcePHP__t_string);
}

if(!isset($Murmur__t_GroupNameList))
{
    $Murmur__t_GroupNameList = IcePHP_defineSequence('::Murmur::GroupNameList', $IcePHP__t_string);
}

if(!isset($Murmur__t_CertificateDer))
{
    $Murmur__t_CertificateDer = IcePHP_defineSequence('::Murmur::CertificateDer', $IcePHP__t_byte);
}

if(!isset($Murmur__t_CertificateList))
{
    $Murmur__t_CertificateList = IcePHP_defineSequence('::Murmur::CertificateList', $Murmur__t_CertificateDer);
}

if(!isset($Murmur__t_UserInfoMap))
{
    $Murmur__t_UserInfoMap = IcePHP_defineDictionary('::Murmur::UserInfoMap', $Murmur__t_UserInfo, $IcePHP__t_string);
}

if(!class_exists('Murmur_Tree'))
{
    class Murmur_Tree extends Ice_ObjectImpl
    {
        public function __construct($c=null, $children=null, $users=null)
        {
            $this->c = is_null($c) ? new Murmur_Channel : $c;
            $this->children = $children;
            $this->users = $users;
        }

        public static function ice_staticId()
        {
            return '::Murmur::Tree';
        }

        public function __toString()
        {
            global $Murmur__t_Tree;
            return IcePHP_stringify($this, $Murmur__t_Tree);
        }

        public $c;
        public $children;
        public $users;
    }

    class Murmur_TreePrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::Tree', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::Tree', $facet);
        }
    }

    $Murmur__t_Tree = IcePHP_defineClass('::Murmur::Tree', 'Murmur_Tree', false, $Ice__t_Object, null, array(
        array('c', $Murmur__t_Channel),
    
        array('children', $Murmur__t_TreeList),
    
        array('users', $Murmur__t_UserList)));

    $Murmur__t_TreePrx = IcePHP_defineProxy($Murmur__t_Tree);
}

if(!class_exists('Murmur_MurmurException'))
{
    class Murmur_MurmurException extends Ice_UserException
    {
        public function __construct()
        {
        }

        public function ice_name()
        {
            return 'Murmur::MurmurException';
        }

        public function __toString()
        {
            global $Murmur__t_MurmurException;
            return IcePHP_stringifyException($this, $Murmur__t_MurmurException);
        }
    }

    $Murmur__t_MurmurException = IcePHP_defineException('::Murmur::MurmurException', 'Murmur_MurmurException', null, null);
}

if(!class_exists('Murmur_InvalidSessionException'))
{
    class Murmur_InvalidSessionException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidSessionException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidSessionException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidSessionException);
        }
    }

    $Murmur__t_InvalidSessionException = IcePHP_defineException('::Murmur::InvalidSessionException', 'Murmur_InvalidSessionException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidChannelException'))
{
    class Murmur_InvalidChannelException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidChannelException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidChannelException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidChannelException);
        }
    }

    $Murmur__t_InvalidChannelException = IcePHP_defineException('::Murmur::InvalidChannelException', 'Murmur_InvalidChannelException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidServerException'))
{
    class Murmur_InvalidServerException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidServerException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidServerException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidServerException);
        }
    }

    $Murmur__t_InvalidServerException = IcePHP_defineException('::Murmur::InvalidServerException', 'Murmur_InvalidServerException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_ServerBootedException'))
{
    class Murmur_ServerBootedException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::ServerBootedException';
        }

        public function __toString()
        {
            global $Murmur__t_ServerBootedException;
            return IcePHP_stringifyException($this, $Murmur__t_ServerBootedException);
        }
    }

    $Murmur__t_ServerBootedException = IcePHP_defineException('::Murmur::ServerBootedException', 'Murmur_ServerBootedException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_ServerFailureException'))
{
    class Murmur_ServerFailureException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::ServerFailureException';
        }

        public function __toString()
        {
            global $Murmur__t_ServerFailureException;
            return IcePHP_stringifyException($this, $Murmur__t_ServerFailureException);
        }
    }

    $Murmur__t_ServerFailureException = IcePHP_defineException('::Murmur::ServerFailureException', 'Murmur_ServerFailureException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidUserException'))
{
    class Murmur_InvalidUserException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidUserException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidUserException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidUserException);
        }
    }

    $Murmur__t_InvalidUserException = IcePHP_defineException('::Murmur::InvalidUserException', 'Murmur_InvalidUserException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidTextureException'))
{
    class Murmur_InvalidTextureException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidTextureException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidTextureException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidTextureException);
        }
    }

    $Murmur__t_InvalidTextureException = IcePHP_defineException('::Murmur::InvalidTextureException', 'Murmur_InvalidTextureException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidCallbackException'))
{
    class Murmur_InvalidCallbackException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidCallbackException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidCallbackException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidCallbackException);
        }
    }

    $Murmur__t_InvalidCallbackException = IcePHP_defineException('::Murmur::InvalidCallbackException', 'Murmur_InvalidCallbackException', $Murmur__t_MurmurException, null);
}

if(!class_exists('Murmur_InvalidSecretException'))
{
    class Murmur_InvalidSecretException extends Murmur_MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_name()
        {
            return 'Murmur::InvalidSecretException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidSecretException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidSecretException);
        }
    }

    $Murmur__t_InvalidSecretException = IcePHP_defineException('::Murmur::InvalidSecretException', 'Murmur_InvalidSecretException', $Murmur__t_MurmurException, null);
}

if(!interface_exists('Murmur_ServerCallback'))
{
    interface Murmur_ServerCallback
    {
        public function userConnected($state);
        public function userDisconnected($state);
        public function userStateChanged($state);
        public function channelCreated($state);
        public function channelRemoved($state);
        public function channelStateChanged($state);
    }

    class Murmur_ServerCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerCallback', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerCallback', $facet);
        }
    }

    $Murmur__t_ServerCallback = IcePHP_defineClass('::Murmur::ServerCallback', 'Murmur_ServerCallback', true, $Ice__t_Object, null, null);

    $Murmur__t_ServerCallbackPrx = IcePHP_defineProxy($Murmur__t_ServerCallback);

    IcePHP_defineOperation($Murmur__t_ServerCallback, 'userConnected', 2, 2, array($Murmur__t_User), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallback, 'userDisconnected', 2, 2, array($Murmur__t_User), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallback, 'userStateChanged', 2, 2, array($Murmur__t_User), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallback, 'channelCreated', 2, 2, array($Murmur__t_Channel), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallback, 'channelRemoved', 2, 2, array($Murmur__t_Channel), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallback, 'channelStateChanged', 2, 2, array($Murmur__t_Channel), null, null, null);
}

if(!defined('Murmur_ContextServer'))
{
    define('Murmur_ContextServer', 1);
}

if(!defined('Murmur_ContextChannel'))
{
    define('Murmur_ContextChannel', 2);
}

if(!defined('Murmur_ContextUser'))
{
    define('Murmur_ContextUser', 4);
}

if(!interface_exists('Murmur_ServerContextCallback'))
{
    interface Murmur_ServerContextCallback
    {
        public function contextAction($action, $usr, $session, $channelid);
    }

    class Murmur_ServerContextCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerContextCallback', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerContextCallback', $facet);
        }
    }

    $Murmur__t_ServerContextCallback = IcePHP_defineClass('::Murmur::ServerContextCallback', 'Murmur_ServerContextCallback', true, $Ice__t_Object, null, null);

    $Murmur__t_ServerContextCallbackPrx = IcePHP_defineProxy($Murmur__t_ServerContextCallback);

    IcePHP_defineOperation($Murmur__t_ServerContextCallback, 'contextAction', 2, 2, array($IcePHP__t_string, $Murmur__t_User, $IcePHP__t_int, $IcePHP__t_int), null, null, null);
}

if(!interface_exists('Murmur_ServerAuthenticator'))
{
    interface Murmur_ServerAuthenticator
    {
        public function authenticate($name, $pw, $certificates, $certhash, $certstrong, $newname, $groups);
        public function getInfo($id, $info);
        public function nameToId($name);
        public function idToName($id);
        public function idToTexture($id);
    }

    class Murmur_ServerAuthenticatorPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerAuthenticator', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerAuthenticator', $facet);
        }
    }

    $Murmur__t_ServerAuthenticator = IcePHP_defineClass('::Murmur::ServerAuthenticator', 'Murmur_ServerAuthenticator', true, $Ice__t_Object, null, null);

    $Murmur__t_ServerAuthenticatorPrx = IcePHP_defineProxy($Murmur__t_ServerAuthenticator);

    IcePHP_defineOperation($Murmur__t_ServerAuthenticator, 'authenticate', 2, 2, array($IcePHP__t_string, $IcePHP__t_string, $Murmur__t_CertificateList, $IcePHP__t_string, $IcePHP__t_bool), array($IcePHP__t_string, $Murmur__t_GroupNameList), $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticator, 'getInfo', 2, 2, array($IcePHP__t_int), array($Murmur__t_UserInfoMap), $IcePHP__t_bool, null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticator, 'nameToId', 2, 2, array($IcePHP__t_string), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticator, 'idToName', 2, 2, array($IcePHP__t_int), null, $IcePHP__t_string, null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticator, 'idToTexture', 2, 2, array($IcePHP__t_int), null, $Murmur__t_Texture, null);
}

if(!interface_exists('Murmur_ServerUpdatingAuthenticator'))
{
    interface Murmur_ServerUpdatingAuthenticator extends Murmur_ServerAuthenticator
    {
        public function registerUser($info);
        public function unregisterUser($id);
        public function getRegisteredUsers($filter);
        public function setInfo($id, $info);
        public function setTexture($id, $tex);
    }

    class Murmur_ServerUpdatingAuthenticatorPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerUpdatingAuthenticator', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerUpdatingAuthenticator', $facet);
        }
    }

    $Murmur__t_ServerUpdatingAuthenticator = IcePHP_defineClass('::Murmur::ServerUpdatingAuthenticator', 'Murmur_ServerUpdatingAuthenticator', true, $Ice__t_Object, array($Murmur__t_ServerAuthenticator), null);

    $Murmur__t_ServerUpdatingAuthenticatorPrx = IcePHP_defineProxy($Murmur__t_ServerUpdatingAuthenticator);

    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticator, 'registerUser', 0, 0, array($Murmur__t_UserInfoMap), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticator, 'unregisterUser', 0, 0, array($IcePHP__t_int), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticator, 'getRegisteredUsers', 2, 2, array($IcePHP__t_string), null, $Murmur__t_NameMap, null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticator, 'setInfo', 2, 2, array($IcePHP__t_int, $Murmur__t_UserInfoMap), null, $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticator, 'setTexture', 2, 2, array($IcePHP__t_int, $Murmur__t_Texture), null, $IcePHP__t_int, null);
}

if(!interface_exists('Murmur_Server'))
{
    interface Murmur_Server
    {
        public function isRunning();
        public function start();
        public function stop();
        public function delete();
        public function id();
        public function addCallback($cb);
        public function removeCallback($cb);
        public function setAuthenticator($auth);
        public function getConf($key);
        public function getAllConf();
        public function setConf($key, $value);
        public function setSuperuserPassword($pw);
        public function getLog($first, $last);
        public function getLogLen();
        public function getUsers();
        public function getChannels();
        public function getCertificateList($session);
        public function getTree();
        public function getBans();
        public function setBans($bans);
        public function kickUser($session, $reason);
        public function getState($session);
        public function setState($state);
        public function sendMessage($session, $text);
        public function hasPermission($session, $channelid, $perm);
        public function addContextCallback($session, $action, $text, $cb, $ctx);
        public function removeContextCallback($cb);
        public function getChannelState($channelid);
        public function setChannelState($state);
        public function removeChannel($channelid);
        public function addChannel($name, $parent);
        public function sendMessageChannel($channelid, $tree, $text);
        public function getACL($channelid, $acls, $groups, $inherit);
        public function setACL($channelid, $acls, $groups, $inherit);
        public function addUserToGroup($channelid, $session, $group);
        public function removeUserFromGroup($channelid, $session, $group);
        public function redirectWhisperGroup($session, $source, $target);
        public function getUserNames($ids);
        public function getUserIds($names);
        public function registerUser($info);
        public function unregisterUser($userid);
        public function updateRegistration($userid, $info);
        public function getRegistration($userid);
        public function getRegisteredUsers($filter);
        public function verifyPassword($name, $pw);
        public function getTexture($userid);
        public function setTexture($userid, $tex);
        public function getUptime();
    }

    class Murmur_ServerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::Server', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::Server', $facet);
        }
    }

    $Murmur__t_Server = IcePHP_defineClass('::Murmur::Server', 'Murmur_Server', true, $Ice__t_Object, null, null);

    $Murmur__t_ServerPrx = IcePHP_defineProxy($Murmur__t_Server);

    IcePHP_defineOperation($Murmur__t_Server, 'isRunning', 2, 2, null, null, $IcePHP__t_bool, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'start', 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_ServerFailureException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'stop', 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'delete', 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'id', 2, 2, null, null, $IcePHP__t_int, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'addCallback', 0, 0, array($Murmur__t_ServerCallbackPrx), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'removeCallback', 0, 0, array($Murmur__t_ServerCallbackPrx), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setAuthenticator', 0, 0, array($Murmur__t_ServerAuthenticatorPrx), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getConf', 2, 2, array($IcePHP__t_string), null, $IcePHP__t_string, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getAllConf', 2, 2, null, null, $Murmur__t_ConfigMap, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setConf', 2, 2, array($IcePHP__t_string, $IcePHP__t_string), null, null, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setSuperuserPassword', 2, 2, array($IcePHP__t_string), null, null, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getLog', 2, 2, array($IcePHP__t_int, $IcePHP__t_int), null, $Murmur__t_LogList, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getLogLen', 2, 2, null, null, $IcePHP__t_int, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getUsers', 2, 2, null, null, $Murmur__t_UserMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getChannels', 2, 2, null, null, $Murmur__t_ChannelMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getCertificateList', 2, 2, array($IcePHP__t_int), null, $Murmur__t_CertificateList, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getTree', 2, 2, null, null, $Murmur__t_Tree, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getBans', 2, 2, null, null, $Murmur__t_BanList, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setBans', 2, 2, array($Murmur__t_BanList), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'kickUser', 0, 0, array($IcePHP__t_int, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getState', 2, 2, array($IcePHP__t_int), null, $Murmur__t_User, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setState', 2, 2, array($Murmur__t_User), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'sendMessage', 0, 0, array($IcePHP__t_int, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'hasPermission', 0, 0, array($IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_int), null, $IcePHP__t_bool, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'addContextCallback', 0, 0, array($IcePHP__t_int, $IcePHP__t_string, $IcePHP__t_string, $Murmur__t_ServerContextCallbackPrx, $IcePHP__t_int), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'removeContextCallback', 0, 0, array($Murmur__t_ServerContextCallbackPrx), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getChannelState', 2, 2, array($IcePHP__t_int), null, $Murmur__t_Channel, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setChannelState', 2, 2, array($Murmur__t_Channel), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'removeChannel', 0, 0, array($IcePHP__t_int), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'addChannel', 0, 0, array($IcePHP__t_string, $IcePHP__t_int), null, $IcePHP__t_int, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'sendMessageChannel', 0, 0, array($IcePHP__t_int, $IcePHP__t_bool, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getACL', 2, 2, array($IcePHP__t_int), array($Murmur__t_ACLList, $Murmur__t_GroupList, $IcePHP__t_bool), null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setACL', 2, 2, array($IcePHP__t_int, $Murmur__t_ACLList, $Murmur__t_GroupList, $IcePHP__t_bool), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'addUserToGroup', 2, 2, array($IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'removeUserFromGroup', 2, 2, array($IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'redirectWhisperGroup', 2, 2, array($IcePHP__t_int, $IcePHP__t_string, $IcePHP__t_string), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getUserNames', 2, 2, array($Murmur__t_IdList), null, $Murmur__t_NameMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getUserIds', 2, 2, array($Murmur__t_NameList), null, $Murmur__t_IdMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'registerUser', 0, 0, array($Murmur__t_UserInfoMap), null, $IcePHP__t_int, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'unregisterUser', 0, 0, array($IcePHP__t_int), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'updateRegistration', 2, 2, array($IcePHP__t_int, $Murmur__t_UserInfoMap), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getRegistration', 2, 2, array($IcePHP__t_int), null, $Murmur__t_UserInfoMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getRegisteredUsers', 2, 2, array($IcePHP__t_string), null, $Murmur__t_NameMap, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'verifyPassword', 2, 2, array($IcePHP__t_string, $IcePHP__t_string), null, $IcePHP__t_int, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getTexture', 2, 2, array($IcePHP__t_int), null, $Murmur__t_Texture, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'setTexture', 2, 2, array($IcePHP__t_int, $Murmur__t_Texture), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidTextureException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Server, 'getUptime', 2, 2, null, null, $IcePHP__t_int, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
}

if(!interface_exists('Murmur_MetaCallback'))
{
    interface Murmur_MetaCallback
    {
        public function started($srv);
        public function stopped($srv);
    }

    class Murmur_MetaCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::MetaCallback', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::MetaCallback', $facet);
        }
    }

    $Murmur__t_MetaCallback = IcePHP_defineClass('::Murmur::MetaCallback', 'Murmur_MetaCallback', true, $Ice__t_Object, null, null);

    $Murmur__t_MetaCallbackPrx = IcePHP_defineProxy($Murmur__t_MetaCallback);

    IcePHP_defineOperation($Murmur__t_MetaCallback, 'started', 0, 0, array($Murmur__t_ServerPrx), null, null, null);
    IcePHP_defineOperation($Murmur__t_MetaCallback, 'stopped', 0, 0, array($Murmur__t_ServerPrx), null, null, null);
}

if(!isset($Murmur__t_ServerList))
{
    $Murmur__t_ServerList = IcePHP_defineSequence('::Murmur::ServerList', $Murmur__t_ServerPrx);
}

if(!interface_exists('Murmur_Meta'))
{
    interface Murmur_Meta
    {
        public function getServer($id);
        public function newServer();
        public function getBootedServers();
        public function getAllServers();
        public function getDefaultConf();
        public function getVersion($major, $minor, $patch, $text);
        public function addCallback($cb);
        public function removeCallback($cb);
        public function getUptime();
        public function getSlice();
        public function getSliceChecksums();
    }

    class Murmur_MetaPrxHelper
    {
        public static function checkedCast($proxy, $facetOrCtx=null, $ctx=null)
        {
            return $proxy->ice_checkedCast('::Murmur::Meta', $facetOrCtx, $ctx);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::Meta', $facet);
        }
    }

    $Murmur__t_Meta = IcePHP_defineClass('::Murmur::Meta', 'Murmur_Meta', true, $Ice__t_Object, null, null);

    $Murmur__t_MetaPrx = IcePHP_defineProxy($Murmur__t_Meta);

    IcePHP_defineOperation($Murmur__t_Meta, 'getServer', 2, 2, array($IcePHP__t_int), null, $Murmur__t_ServerPrx, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'newServer', 0, 0, null, null, $Murmur__t_ServerPrx, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'getBootedServers', 2, 2, null, null, $Murmur__t_ServerList, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'getAllServers', 2, 2, null, null, $Murmur__t_ServerList, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'getDefaultConf', 2, 2, null, null, $Murmur__t_ConfigMap, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'getVersion', 2, 2, null, array($IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_int, $IcePHP__t_string), null, null);
    IcePHP_defineOperation($Murmur__t_Meta, 'addCallback', 0, 0, array($Murmur__t_MetaCallbackPrx), null, null, array($Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'removeCallback', 0, 0, array($Murmur__t_MetaCallbackPrx), null, null, array($Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_Meta, 'getUptime', 2, 2, null, null, $IcePHP__t_int, null);
    IcePHP_defineOperation($Murmur__t_Meta, 'getSlice', 2, 2, null, null, $IcePHP__t_string, null);
    IcePHP_defineOperation($Murmur__t_Meta, 'getSliceChecksums', 2, 2, null, null, $Ice__t_SliceChecksumDict, null);
}
?>
